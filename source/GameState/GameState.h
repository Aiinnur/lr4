/*ƒќƒ≈Ћј“№ –≈јЋ»«ј÷»ё EVENT, UPDATE, RENDER*/#pragma once#include "../state/i_state.h"#include "../IWindowKeeper/IWindowKeeper.h"#include "../RoomAndMaze/RoomAndMaze.h"#include "../GameContext/GameContext.h"#include "../GameContext/ContextManager.h"#include "../GameEvent/GameEvent.h"//  ласс представл€ет состо€ние игры, включа€ все, что происходит в лабиринте, и сам лабиринтclass GameState : public IState, public IWindowKeeper {public:    GameState(IStateManager& state_manager, const std::string& window_title, const sf::VideoMode& mode);    // ћетод дл€ установки состо€ни€ лабиринта    void set_maze(Maze&& maze) { m_maze = std::move(maze); }    // ћетод дл€ установки контекста игры (все, что происходит в лабиринте)    void set_context(GameContext&& context);    // ћетод, выполн€ющий шаг игры    bool do_step() override;    void event_handling() override;    void update() override;    void render() override;private:    void process_key_pressed(sf::Keyboard::Key key);    void process_event(std::unique_ptr<IGameEvent> event) { event->handle(m_context_manager.get_current_context()); };    void clear_background();    void effect_from_state();private:    ContextManager m_context_manager;    Maze m_maze;    bool m_do_not_update = false;};